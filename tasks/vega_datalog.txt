drluser@16de3d251367:~$ python /rl/vega/vega/tools/run_pipeline.py /rl/vega/examples/nas/cars/cars.yml
run_pipeline.py: Using cuda device
run_pipeline.py: main(): args: Namespace(config_file='/rl/vega/examples/nas/cars/cars.yml', backend=None, device=None, resume=False, task_id=None, dataset=None, data_path=None, batch_size=None, epochs=None, standalone_boot=None, parallel_search=None, parallel_fully_train=None, master_ip=None, num_workers=None, listen_port=None, slaves=None, security=False)
run_pipeline.py: config general is: {'backend': 'pytorch'}
class_factory.py: get_cls(): t_cls_name:  Quota
run.py: run()
run.py: _run_pipeline()
INFO:root:------------------------------------------------
INFO:root:  task id: 1224.055504.308
INFO:root:------------------------------------------------
INFO:root:Hello Vega
INFO:root:------------------------------------------------
INFO:root:End Hello Vega
pipeline.py: run()
Pipeline step_name:  nas
conf.py: PipeStepConfig: inside from_dict
class_factory.py: get_cls(): t_cls_name:  Cifar10
conf.py: SearchSpaceConfig: inside from_dict
conf.py: SearchSpaceConfig: leaving from_dict
conf.py: PipeStepConfig: inside from_dict after cls
conf.py: PipeStepConfig: leaving from_dict
conf.py: PipeStepConfig: inside from_dict
class_factory.py: get_cls(): t_cls_name:  Cifar10
class_factory.py: get_cls(): t_cls_name:  CARSAlgorithm
conf.py: SearchSpaceConfig: inside from_dict
conf.py: SearchSpaceConfig: leaving from_dict
conf.py: PipeStepConfig: inside from_dict after cls
conf.py: PipeStepConfig: inside from_dict after cls.type
conf.py: PipeStepConfig: leaving from_dict
INFO:root:------------------------------------------------
INFO:root:  Step: nas
INFO:root:------------------------------------------------
PipeStepConfig.type:  SearchPipeStep
class_factory.py: get_cls(): t_cls_name:  SearchPipeStep
search_space.py: SearchSpace desc:  None
search_space.py
********************************************************************************
********************************************************************************
generator.py self.search_space:  {'modules': ['super_network'], 'super_network': {'type': 'CARSDartsNetwork', 'stem': {'type': 'PreOneStem', 'init_channels': 16, 'stem_multi': 3}, 'head': {'type': 'LinearClassificationHead'}, 'init_channels': 16, 'num_classes': 10, 'auxiliary': False, 'search': True, 'cells': {'modules': ['normal', 'normal', 'reduce', 'normal', 'normal', 'reduce', 'normal', 'normal'], 'normal': {'type': 'NormalCell', 'steps': 4, 'genotype': [[['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 2, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 2, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 3, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 3, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 3, 2], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 2], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 3], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 2], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 3], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 4]], 'concat': [2, 3, 4, 5]}, 'reduce': {'type': 'ReduceCell', 'steps': 4, 'genotype': [[['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 2, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 2, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 3, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 3, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 3, 2], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 2], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 3], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 2], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 3], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 4]], 'concat': [2, 3, 4, 5]}}}, 'type': 'SearchSpace'}
**************************************************
class_factory.py: get_cls(): t_cls_name:  CARSAlgorithm
class_factory.py: get_cls(): t_cls_name:  DartsCodec
generator.py self.search_alg:  <vega.algorithms.nas.cars.cars_alg.CARSAlgorithm object at 0x7f1c3f745b40>
search_pipe_step.py: type of self.generator:  <class 'vega.core.pipeline.generator.Generator'>
pipeline.py: run(): right before pipestep do
PipeStep do args:  ()
PipeStep do kwargs:  {}
class_factory.py: get_cls(): t_cls_name:  Quota
generator.py in range(10)
generator.py in range(10) worker_id:  0
class_factory.py: get_cls(): t_cls_name:  Quota
class_factory.py: get_cls(): t_cls_name:  Quota
search_pipe_step.py: res:  [(0, {'type': 'SearchSpace', 'super_network': {'type': 'CARSDartsNetwork', 'stem': {'type': 'PreOneStem', 'init_channels': 16, 'stem_multi': 3}, 'head': {'type': 'LinearClassificationHead'}, 'init_channels': 16, 'num_classes': 10, 'auxiliary': False, 'search': True, 'cells': {'modules': ['normal', 'normal', 'reduce', 'normal', 'normal', 'reduce', 'normal', 'normal'], 'normal': {'type': 'NormalCell', 'steps': 4, 'genotype': [[['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 2, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 2, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 3, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 3, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 3, 2], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 2], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 3], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 2], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 3], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 4]], 'concat': [2, 3, 4, 5]}, 'reduce': {'type': 'ReduceCell', 'steps': 4, 'genotype': [[['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 2, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 2, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 3, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 3, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 3, 2], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 2], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 3], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 2], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 3], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 4]], 'concat': [2, 3, 4, 5]}}}, 'modules': ['super_network']}, {})]
search_pipe_step.py: inside res
search_pipe_step.py: PipeStepConfig.trainer.type:  Trainer
class_factory.py: get_cls(): t_cls_name:  Trainer
search_pipe_step.py: self.user_trainer_config:  {'actions_list': None, 'adaptive_muti_loss': False, 'apex_combine_grad': True, 'apex_loss_scale': 64, 'calc_latency': False, 'calc_params_each_epoch': False, 'call_metrics_on_train': True, 'callbacks': 'CARSTrainerCallback', 'codec': None, 'darts_template_file': '{default_darts_cifar10_template}', 'distributed': False, 'epochs': 500, 'eval_per_epoch': True, 'get_train_metric_after_epoch': True, 'grad_clip': 5.0, 'hps_file': None, 'init_model_file': None, 'is_detection_trainer': False, 'is_gan_trainer': False, 'keep_batchnorm_fp32': False, 'kwargs': None, 'lazy_built': False, 'limits': None, 'load_checkpoint': True, 'load_weights_file': True, 'loss': {'_class_type': 'trainer.loss', '_exclude_keys': ['type'], '_update_all_attrs': True, 'type': 'CrossEntropyLoss'}, 'loss_scale': 1.0, 'lr_scheduler': {'_class_type': 'trainer.lr_scheduler', '_exclude_keys': ['type'], '_update_all_attrs': True, 'params': {'T_max': 500, 'eta_min': 0.001}, 'type': 'CosineAnnealingLR'}, 'max_train_steps': None, 'metric': {'_class_type': 'trainer.metric', '_update_all_attrs': True, 'params': {}, 'type': 'accuracy'}, 'mixup': False, 'model_desc': None, 'model_desc_file': None, 'model_path': None, 'model_statistics': True, 'multi_task': False, 'opt_level': 'O2', 'optimizer': {'_class_type': 'trainer.optimizer', '_exclude_keys': ['type'], '_update_all_attrs': True, 'params': {'lr': 0.025, 'momentum': 0.9, 'weight_decay': 0.0003}, 'type': 'SGD'}, 'perfs_cmp_key': None, 'perfs_cmp_mode': None, 'pretrained_model_file': None, 'report_freq': 10, 'report_on_epoch': False, 'report_on_valid': False, 'save_checkpoint': True, 'save_ext_model': False, 'save_model_desc': False, 'save_slave_model': False, 'save_steps': 500, 'script': None, 'seed': 10, 'syncbn': False, 'task': 'Classification', 'train_in_once': False, 'train_report_steps': 10, 'train_verbose': 2, 'type': 'Trainer', 'unrolled': True, 'use_amp': False, 'use_dag_forward': False, 'use_unsupervised_pretrain': False, 'valid_interval': 1, 'valid_report_steps': 10, 'valid_verbose': 2, 'with_train': True, 'with_valid': True}
class_factory.py: get_cls(): t_cls_name:  TrainerTorch
trainer_base.py: TrainerBase: inside __init__, self.config: {"actions_list": null, "adaptive_muti_loss": false, "apex_combine_grad": true, "apex_loss_scale": 64, "calc_latency": false, "calc_params_each_epoch": false, "call_metrics_on_train": true, "callbacks": "CARSTrainerCallback", "codec": null, "darts_template_file": "{default_darts_cifar10_template}", "distributed": false, "epochs": 500, "eval_per_epoch": true, "get_train_metric_after_epoch": true, "grad_clip": 5.0, "hps_file": null, "init_model_file": null, "is_detection_trainer": false, "is_gan_trainer": false, "keep_batchnorm_fp32": false, "kwargs": null, "lazy_built": false, "limits": null, "load_checkpoint": true, "load_weights_file": true, "loss": {"_class_type": "trainer.loss", "_exclude_keys": ["type"], "_update_all_attrs": true, "type": "CrossEntropyLoss"}, "loss_scale": 1.0, "lr_scheduler": {"_class_type": "trainer.lr_scheduler", "_exclude_keys": ["type"], "_update_all_attrs": true, "params": {"T_max": 500, "eta_min": 0.001}, "type": "CosineAnnealingLR"}, "max_train_steps": null, "metric": {"_class_type": "trainer.metric", "_update_all_attrs": true, "params": {}, "type": "accuracy"}, "mixup": false, "model_desc": null, "model_desc_file": null, "model_path": null, "model_statistics": true, "multi_task": false, "opt_level": "O2", "optimizer": {"_class_type": "trainer.optimizer", "_exclude_keys": ["type"], "_update_all_attrs": true, "params": {"lr": 0.025, "momentum": 0.9, "weight_decay": 0.0003}, "type": "SGD"}, "perfs_cmp_key": null, "perfs_cmp_mode": null, "pretrained_model_file": null, "report_freq": 10, "report_on_epoch": false, "report_on_valid": false, "save_checkpoint": true, "save_ext_model": false, "save_model_desc": false, "save_slave_model": false, "save_steps": 500, "script": null, "seed": 10, "syncbn": false, "task": "Classification", "train_in_once": false, "train_report_steps": 10, "train_verbose": 2, "type": "Trainer", "unrolled": true, "use_amp": false, "use_dag_forward": false, "use_unsupervised_pretrain": false, "valid_interval": 1, "valid_report_steps": 10, "valid_verbose": 2, "with_train": true, "with_valid": true}
search_pipe_step.py: after TrainerConfig
search_pipe_step.py: _dispatch_trainer(): __task_id__: 1224.055504.308
search_pipe_step.py: _dispatch_trainer(): _step_name: nas
search_pipe_step.py: _dispatch_trainer(): _worker_id: 0
search_pipe_step.py: _dispatch_trainer(): rank: 0
search_pipe_step.py: _dispatch_trainer(): world_size: 1
search_pipe_step.py: _dispatch_trainer(): worker_addr:
search_pipe_step.py: _dispatch_trainer(): worker_nccl_port: 16666
search_pipe_step.py: _dispatch_trainer(): timeout: 113529600000
search_pipe_step.py: _dispatch_trainer(): config: {"actions_list": null, "adaptive_muti_loss": false, "apex_combine_grad": true, "apex_loss_scale": 64, "calc_latency": false, "calc_params_each_epoch": false, "call_metrics_on_train": true, "callbacks": "CARSTrainerCallback", "codec": null, "darts_template_file": "{default_darts_cifar10_template}", "distributed": false, "epochs": 500, "eval_per_epoch": true, "get_train_metric_after_epoch": true, "grad_clip": 5.0, "hps_file": null, "init_model_file": null, "is_detection_trainer": false, "is_gan_trainer": false, "keep_batchnorm_fp32": false, "kwargs": {}, "lazy_built": false, "limits": null, "load_checkpoint": true, "load_weights_file": true, "loss": {"_class_type": "trainer.loss", "_exclude_keys": ["type"], "_update_all_attrs": true, "type": "CrossEntropyLoss"}, "loss_scale": 1.0, "lr_scheduler": {"_class_type": "trainer.lr_scheduler", "_exclude_keys": ["type"], "_update_all_attrs": true, "params": {"T_max": 500, "eta_min": 0.001}, "type": "CosineAnnealingLR"}, "max_train_steps": null, "metric": {"_class_type": "trainer.metric", "_update_all_attrs": true, "params": {}, "type": "accuracy"}, "mixup": false, "model_desc": {"type": "SearchSpace", "super_network": {"type": "CARSDartsNetwork", "stem": {"type": "PreOneStem", "init_channels": 16, "stem_multi": 3}, "head": {"type": "LinearClassificationHead"}, "init_channels": 16, "num_classes": 10, "auxiliary": false, "search": true, "cells": {"modules": ["normal", "normal", "reduce", "normal", "normal", "reduce", "normal", "normal"], "normal": {"type": "NormalCell", "steps": 4, "genotype": [[["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 2, 0], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 2, 1], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 3, 0], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 3, 1], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 3, 2], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 4, 0], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 4, 1], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 4, 2], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 4, 3], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 5, 0], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 5, 1], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 5, 2], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 5, 3], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 5, 4]], "concat": [2, 3, 4, 5]}, "reduce": {"type": "ReduceCell", "steps": 4, "genotype": [[["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 2, 0], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 2, 1], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 3, 0], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 3, 1], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 3, 2], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 4, 0], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 4, 1], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 4, 2], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 4, 3], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 5, 0], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 5, 1], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 5, 2], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 5, 3], [["none", "max_pool_3x3", "avg_pool_3x3", "skip_connect", "sep_conv_3x3", "sep_conv_5x5", "dil_conv_3x3", "dil_conv_5x5"], 5, 4]], "concat": [2, 3, 4, 5]}}}, "modules": ["super_network"]}, "model_desc_file": null, "model_path": null, "model_statistics": true, "multi_task": false, "opt_level": "O2", "optimizer": {"_class_type": "trainer.optimizer", "_exclude_keys": ["type"], "_update_all_attrs": true, "params": {"lr": 0.025, "momentum": 0.9, "weight_decay": 0.0003}, "type": "SGD"}, "perfs_cmp_key": null, "perfs_cmp_mode": null, "pretrained_model_file": null, "report_freq": 10, "report_on_epoch": false, "report_on_valid": false, "save_checkpoint": true, "save_ext_model": false, "save_model_desc": false, "save_slave_model": false, "save_steps": 500, "script": null, "seed": 10, "syncbn": false, "task": "Classification", "train_in_once": false, "train_report_steps": 10, "train_verbose": 2, "type": "Trainer", "unrolled": true, "use_amp": false, "use_dag_forward": false, "use_unsupervised_pretrain": false, "valid_interval": 1, "valid_report_steps": 10, "valid_verbose": 2, "with_train": true, "with_valid": true}
search_pipe_step.py: _dispatch_trainer(): worker_type: WorkerTypes.TRAINER
search_pipe_step.py: _dispatch_trainer(): actions_list: None
search_pipe_step.py: _dispatch_trainer(): is_chief: True
search_pipe_step.py: _dispatch_trainer(): epochs: 500
search_pipe_step.py: _dispatch_trainer(): do_validation: True
search_pipe_step.py: _dispatch_trainer(): auto_save_ckpt: True
search_pipe_step.py: _dispatch_trainer(): auto_save_perf: True
search_pipe_step.py: _dispatch_trainer(): save_ext_model: False
search_pipe_step.py: _dispatch_trainer(): skip_train: False
search_pipe_step.py: _dispatch_trainer(): valid_interval: 1
search_pipe_step.py: _dispatch_trainer(): hps: {}
search_pipe_step.py: _dispatch_trainer(): model: None
search_pipe_step.py: _dispatch_trainer(): model_desc: {'type': 'SearchSpace', 'super_network': {'type': 'CARSDartsNetwork', 'stem': {'type': 'PreOneStem', 'init_channels': 16, 'stem_multi': 3}, 'head': {'type': 'LinearClassificationHead'}, 'init_channels': 16, 'num_classes': 10, 'auxiliary': False, 'search': True, 'cells': {'modules': ['normal', 'normal', 'reduce', 'normal', 'normal', 'reduce', 'normal', 'normal'], 'normal': {'type': 'NormalCell', 'steps': 4, 'genotype': [[['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 2, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 2, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 3, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 3, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 3, 2], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 2], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 3], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 2], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 3], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 4]], 'concat': [2, 3, 4, 5]}, 'reduce': {'type': 'ReduceCell', 'steps': 4, 'genotype': [[['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 2, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 2, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 3, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 3, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 3, 2], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 2], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 4, 3], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 0], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 1], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 2], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 3], [['none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3', 'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5'], 5, 4]], 'concat': [2, 3, 4, 5]}}}, 'modules': ['super_network']}
search_pipe_step.py: _dispatch_trainer(): optimizer: None
search_pipe_step.py: _dispatch_trainer(): lr_scheduler: None
search_pipe_step.py: _dispatch_trainer(): loss: None
search_pipe_step.py: _dispatch_trainer(): use_syncbn: False
search_pipe_step.py: _dispatch_trainer(): use_amp: False
search_pipe_step.py: _dispatch_trainer(): train_metrics: None
search_pipe_step.py: _dispatch_trainer(): valid_metrics: None
search_pipe_step.py: _dispatch_trainer(): call_metrics_on_train: True
search_pipe_step.py: _dispatch_trainer(): train_verbose: 2
search_pipe_step.py: _dispatch_trainer(): valid_verbose: 2
search_pipe_step.py: _dispatch_trainer(): train_report_steps: 10
search_pipe_step.py: _dispatch_trainer(): valid_report_steps: 10
search_pipe_step.py: _dispatch_trainer(): multi_task: None
search_pipe_step.py: _dispatch_trainer(): train_loader: None
search_pipe_step.py: _dispatch_trainer(): valid_loader: None
search_pipe_step.py: _dispatch_trainer(): train_step: None
search_pipe_step.py: _dispatch_trainer(): valid_step: None
search_pipe_step.py: _dispatch_trainer(): make_batch: None
search_pipe_step.py: _dispatch_trainer(): model_fn: None
search_pipe_step.py: _dispatch_trainer(): train_input_fn: None
search_pipe_step.py: _dispatch_trainer(): valid_input_fn: None
search_pipe_step.py: _dispatch_trainer(): callbacks: None
search_pipe_step.py: _dispatch_trainer(): performance: None
search_pipe_step.py: _dispatch_trainer(): best_performance: None
search_pipe_step.py: _dispatch_trainer(): runtime: None
search_pipe_step.py: _dispatch_trainer(): load_checkpoint: False
search_pipe_step.py: _dispatch_trainer(): load_weights_file: True
search_pipe_step.py: _dispatch_trainer(): _resume_training: False
search_pipe_step.py: _dispatch_trainer(): ext_model: None
search_pipe_step.py: _dispatch_trainer(): _start_epoch: 0
search_pipe_step.py: _dispatch_trainer(): visual_data: {}
search_pipe_step.py: _dispatch_trainer(): load_ckpt_flag: False
search_pipe_step.py: _dispatch_trainer(): ddp: False
search_pipe_step.py: _dispatch_trainer(): horovod: False
search_pipe_step.py: _dispatch_trainer(): hccl: False
search_pipe_step.py: _dispatch_trainer(): num_workers: 0
search_pipe_step.py: _dispatch_trainer(): sampler: None
search_pipe_step.py: _dispatch_trainer(): lazy_built: False
search_pipe_step.py: _dispatch_trainer(): _next_rung: False
search_pipe_step.py: _dispatch_trainer(): checkpoint_file_name: checkpoint.pth
search_pipe_step.py: _dispatch_trainer(): model_pickle_file_name: model.pkl
search_pipe_step.py: _dispatch_trainer(): model_path: /home/drluser/tasks/1224.055504.308/workers/nas/0/model.pkl
search_pipe_step.py: _dispatch_trainer(): checkpoint_file: /home/drluser/tasks/1224.055504.308/workers/nas/0/checkpoint.pth
search_pipe_step.py: _dispatch_trainer(): weights_file: /home/drluser/tasks/1224.055504.308/workers/nas/0/model_0.pth
search_pipe_step.py: _dispatch_trainer(): loss_input: None
search_pipe_step.py: _dispatch_trainer(): gpu_nums: 1
search_pipe_step.py: _dispatch_trainer(): use_unsupervised_pretrain: False
search_pipe_step.py: _dispatch_trainer(): standalone: False
INFO:root:submit trainer, id=0
local_master.py: inside run()
local_master.py: run(): worker:  <vega.trainer.trainer_torch.TrainerTorch object at 0x7f1c3f746c80>
Number of CUDA devices: 1
Device ID: 0, Device Name: NVIDIA GeForce RTX 3080 Ti Laptop GPU
Local Master run Using cuda device
trainer_base.py: train_process(): inside train process
trainer_base.py: inside _init_callbacks
callback_list.py: __get_callbacks: customs:  ['CARSTrainerCallback']
callback_list.py: __get_callbacks: disables:  []
class_factory.py: get_cls(): t_cls_name:  CARSTrainerCallback
class_factory.py: get_cls(): t_cls_name:  ModelCheckpoint
class_factory.py: get_cls(): t_cls_name:  RuntimeCallback
class_factory.py: get_cls(): t_cls_name:  DdpTorch
class_factory.py: get_cls(): t_cls_name:  SearchAlgorithmCallbacks
class_factory.py: get_cls(): t_cls_name:  PerformanceSaver
class_factory.py: get_cls(): t_cls_name:  ModelBuilder
class_factory.py: get_cls(): t_cls_name:  ProgressLogger
class_factory.py: get_cls(): t_cls_name:  CARSTrainerCallback
class_factory.py: get_cls(): t_cls_name:  Horovod
class_factory.py: get_cls(): t_cls_name:  Hccl
class_factory.py: get_cls(): t_cls_name:  MetricsEvaluator
class_factory.py: get_cls(): t_cls_name:  LearningRateScheduler
callback_list.py: if self.train_step is None: callback.train_step:  <bound method CARSTrainerCallback.train_step of <vega.algorithms.nas.cars.cars_trainer_callback.CARSTrainerCallback object at 0x7f1c3f798a30>>
trainer_base.py: inside _init_callbacks: after CallbackList
trainer_base.py: train_process(): before build
_init_model()
NetworkDesc to_model module_type is SearchSpace
NetworkDesc to_model ClassType.NETWORK
class_factory.py: get_cls(): t_cls_name:  Module
NetworkDesc to_model module is <class 'vega.modules.module.Module'>
inside from_desc
cls_name is CARSDartsNetwork
class_factory.py: get_cls(): t_cls_name:  CARSDartsNetwork
no t_cls
<class 'vega.networks.super_network.CARSDartsNetwork'>
super_network.py: CARSDartsNetwork: __init__()
super_network.py: DartsNetwork: __init__()
class_factory.py: get_cls(): t_cls_name:  PreOneStem
no t_cls
<class 'vega.modules.preprocess.stem.PreOneStem'>
connections.py: _build()
_build before model
class_factory.py: get_cls(): t_cls_name:  NormalCell
no t_cls
<class 'vega.modules.operators.cell.NormalCell'>
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
_build after model
connections.py: _build(): end
_build before model
class_factory.py: get_cls(): t_cls_name:  NormalCell
no t_cls
<class 'vega.modules.operators.cell.NormalCell'>
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
_build after model
connections.py: _build(): end
_build before model
class_factory.py: get_cls(): t_cls_name:  ReduceCell
no t_cls
<class 'vega.modules.operators.cell.ReduceCell'>
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
_build after model
connections.py: _build(): end
_build before model
class_factory.py: get_cls(): t_cls_name:  NormalCell
no t_cls
<class 'vega.modules.operators.cell.NormalCell'>
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
_build after model
connections.py: _build(): end
_build before model
class_factory.py: get_cls(): t_cls_name:  NormalCell
no t_cls
<class 'vega.modules.operators.cell.NormalCell'>
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
_build after model
connections.py: _build(): end
_build before model
class_factory.py: get_cls(): t_cls_name:  ReduceCell
no t_cls
<class 'vega.modules.operators.cell.ReduceCell'>
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
_build after model
connections.py: _build(): end
_build before model
class_factory.py: get_cls(): t_cls_name:  NormalCell
no t_cls
<class 'vega.modules.operators.cell.NormalCell'>
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
_build after model
connections.py: _build(): end
_build before model
class_factory.py: get_cls(): t_cls_name:  NormalCell
no t_cls
<class 'vega.modules.operators.cell.NormalCell'>
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
mix_ops.py: MixedOp: __init__()
_build after model
connections.py: _build(): end
class_factory.py: get_cls(): t_cls_name:  LinearClassificationHead
no t_cls
<class 'vega.modules.blocks.head.LinearClassificationHead'>
class_factory.py: get_cls(): t_cls_name:  Sequential
from_desc:
INFO:root:Model was created.
inside init_trainer desc
model.cuda()
trainer_base.py: train_process(): after build
class_factory.py: get_cls(): t_cls_name:  Cifar10
class_factory.py: get_cls(): t_cls_name:  Cifar10
class_factory.py: get_cls(): t_cls_name:  SGD
class_factory.py: get_cls(): t_cls_name:  CrossEntropyLoss
class_factory.py: get_cls(): t_cls_name:  CosineAnnealingLR
class_factory.py: get_cls(): t_cls_name:  accuracy
class_factory.py: get_cls(): t_cls_name:  accuracy
class_factory.py: get_cls(): t_cls_name:  accuracy
class_factory.py: get_cls(): t_cls_name:  accuracy
model info:
<class 'vega.networks.super_network.CARSDartsNetwork'>
Inheritance hierarchy:
<class 'vega.networks.super_network.CARSDartsNetwork'>
<class 'vega.networks.super_network.DartsNetwork'>
<class 'vega.modules.module.Module'>
<class 'vega.modules.operators.functions.serializable.ModuleSerializable'>
<class 'vega.modules.operators.functions.serializable.Serializable'>
<class 'vega.modules.operators.functions.pytorch_fn.Module'>
<class 'torch.nn.modules.module.Module'>
<class 'object'>
model info end
***trainer_base.py: inside _train_loop()
search_space.py: SearchSpace desc:  None
search_space.py
********************************************************************************
********************************************************************************
class_factory.py: get_cls(): t_cls_name:  CARSAlgorithm
class_factory.py: get_cls(): t_cls_name:  DartsCodec
class_factory.py: get_cls(): t_cls_name:  Cifar10
class_factory.py: get_cls(): t_cls_name:  Cifar10
trainer_torch.py: TrainerTorch: inside _train_epoch
trainer_torch.py: TrainerTorch: before train_step
cars_trainer_callback.py: train_step()
cars_trainer_callback.py: train_step(): alpha size:  torch.Size([28, 8])
cars_trainer_callback.py: train_step(): self.trainer <class 'vega.trainer.trainer_torch.TrainerTorch'>
cars_trainer_callback.py: train_step(): self.trainer.model <class 'vega.networks.super_network.CARSDartsNetwork'>
pytorch_fn.py: Module: forward(): call()
super_network.py: DartsNetwork: call()
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
super_network.py: DartsNetwork: call(): i:  0 <class 'vega.modules.operators.cell.NormalCell'>
pytorch_fn.py: Module: forward(): call()
cell.py: Cell: call(): Cell call self.steps:  4
cell.py: Cell: call(): Cell call out_inp_list:  [[0, 1], [0, 1, 2], [0, 1, 2, 3], [0, 1, 2, 3, 4]]
cell.py: Cell: call(): preprocess0
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): preprocess1
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  0 0
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  1 1
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  0 0
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  1 1
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  2 2
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  0 0
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  1 1
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  2 2
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  3 3
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  0 0
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  1 1
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  2 2
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  3 3
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  4 4
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
super_network.py: DartsNetwork: call(): i:  1 <class 'vega.modules.operators.cell.NormalCell'>
pytorch_fn.py: Module: forward(): call()
cell.py: Cell: call(): Cell call self.steps:  4
cell.py: Cell: call(): Cell call out_inp_list:  [[0, 1], [0, 1, 2], [0, 1, 2, 3], [0, 1, 2, 3, 4]]
cell.py: Cell: call(): preprocess0
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): preprocess1
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  0 0
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  1 1
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  0 0
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  1 1
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  2 2
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  0 0
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  1 1
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  2 2
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  3 3
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  0 0
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  1 1
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  2 2
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  3 3
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  4 4
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
    (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
    (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
  (0_conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
  (conv2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
super_network.py: DartsNetwork: call(): i:  2 <class 'vega.modules.operators.cell.ReduceCell'>
pytorch_fn.py: Module: forward(): call()
cell.py: Cell: call(): Cell call self.steps:  4
cell.py: Cell: call(): Cell call out_inp_list:  [[0, 1], [0, 1, 2], [0, 1, 2, 3], [0, 1, 2, 3, 4]]
cell.py: Cell: call(): preprocess0
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): preprocess1
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  0 0
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): FactorizedReduce(
    (relu): Relu()
    (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
    (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 FactorizedReduce(
  (relu): Relu()
  (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.FactorizedReduce'>
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  1 1
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): FactorizedReduce(
    (relu): Relu()
    (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
    (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 FactorizedReduce(
  (relu): Relu()
  (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.FactorizedReduce'>
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  0 0
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): FactorizedReduce(
    (relu): Relu()
    (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
    (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 FactorizedReduce(
  (relu): Relu()
  (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.FactorizedReduce'>
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  1 1
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): FactorizedReduce(
    (relu): Relu()
    (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
    (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 FactorizedReduce(
  (relu): Relu()
  (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.FactorizedReduce'>
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  2 2
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  0 0
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): FactorizedReduce(
    (relu): Relu()
    (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
    (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 FactorizedReduce(
  (relu): Relu()
  (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.FactorizedReduce'>
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  1 1
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): FactorizedReduce(
    (relu): Relu()
    (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
    (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 FactorizedReduce(
  (relu): Relu()
  (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.FactorizedReduce'>
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  2 2
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  3 3
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  0 0
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): FactorizedReduce(
    (relu): Relu()
    (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
    (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 FactorizedReduce(
  (relu): Relu()
  (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.FactorizedReduce'>
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  1 1
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): FactorizedReduce(
    (relu): Relu()
    (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
    (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 FactorizedReduce(
  (relu): Relu()
  (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
  (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.FactorizedReduce'>
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  2 2
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  3 3
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
cell.py: Cell: call(): j, inp:  4 4
cell.py: Cell: call(): op:  MixedOp(
  (none): Zero()
  (max_pool_3x3): Seq(
    (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (avg_pool_3x3): Seq(
    (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (skip_connect): Identity()
  (sep_conv_3x3): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (sep_conv_5x5): SeparatedConv(
    (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
    (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (0_relu): Relu()
  )
  (dil_conv_3x3): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
  (dil_conv_5x5): DilConv(
    (relu): Relu()
    (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
    (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  )
)
pytorch_fn.py: Module: forward(): call()
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  0 Zero() <class 'vega.modules.operators.functions.pytorch_fn.Zero'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  1 Seq(
  (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  2 Seq(
  (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.Seq'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  3 Identity() <class 'vega.modules.operators.functions.pytorch_fn.Identity'>
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  4 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  5 SeparatedConv(
  (0_conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
  (0_conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (0_batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
  (0_relu): Relu()
) <class 'vega.modules.operators.conv.SeparatedConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  6 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
mix_ops.py: MixedOp: call(): for idx, op in enumerate(self.children()):  7 DilConv(
  (relu): Relu()
  (conv1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
  (conv2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (batch): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
) <class 'vega.modules.operators.conv.DilConv'>
pytorch_fn.py: Module: forward(): call()
pytorch_fn.py: Module: call():
super_network.py: DartsNetwork: call(): i:  3 <class 'vega.modules.operators.cell.NormalCell'>
pytorch_fn.py: Module: forward(): call()
cell.py: Cell: call(): Cell call self.steps:  4
cell.py: Cell: call(): Cell call out_inp_list:  [[0, 1], [0, 1, 2], [0, 1, 2, 3], [0, 1, 2, 3, 4]]
cell.py: Cell: call(): preprocess0
pytorch_fn.py: Module: forward(): call()
^CINFO:root:Shutdown urgently.
INFO:root:Shutdown urgently.
INFO:root:Shutdown urgently.
INFO:root:Shutdown urgently.
INFO:root:Shutdown urgently.
INFO:root:Shutdown urgently.
INFO:root:Shutdown urgently.
INFO:root:Shutdown urgently.
INFO:root:Shutdown urgently.
drluser@16de3d251367:~$